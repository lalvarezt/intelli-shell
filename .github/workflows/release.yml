name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  create-release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Check version matches tag
        id: check_version
        shell: bash
        run: |
          tag_version="${GITHUB_REF#refs/tags/v}"
          cargo_version=$(grep '^version =' Cargo.toml | head -n1 | sed -E "s/version = \"([^\"]+)\"/\1/")
          if [ "$cargo_version" != "$tag_version" ]; then
            echo "Version mismatch: Cargo.toml ($cargo_version) != tag ($tag_version)"
            exit 1
          fi

      - name: Create draft release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          # Use an older Ubuntu for gnu targets to ensure GLIBC compatibility
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          # Define the build path and the artifact name
          build_path="target/${{ matrix.target }}/release"
          artifact_name="intelli-shell-${{ matrix.target }}"

          # Package accordingly
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "${artifact_name}.zip" "./${build_path}/intelli-shell.exe"
            echo "ASSET=${artifact_name}.zip" >> $GITHUB_ENV
          else
            tar czvf "${artifact_name}.tar.gz" -C "${build_path}" "intelli-shell"
            echo "ASSET=${artifact_name}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: ${{ env.ASSET }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: build-and-upload
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
